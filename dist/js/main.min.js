"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return i};var c,i={},t=Object.prototype,l=t.hasOwnProperty,s=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function a(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(c){a=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var o,a,i,u,e=e&&e.prototype instanceof g?e:g,e=Object.create(e.prototype),n=new E(n||[]);return s(e,"_invoke",{value:(o=t,a=r,i=n,u=y,function(t,e){if(u===p)throw new Error("Generator is already running");if(u===d){if("throw"===t)throw e;return{value:c,done:!0}}for(i.method=t,i.arg=e;;){var r=i.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===c)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=c,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),m;n=f(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,m;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=c),r.delegate=null,m):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,m)}(r,i);if(r){if(r===m)continue;return r}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(u===y)throw u=d,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);u=p;r=f(o,a,i);if("normal"===r.type){if(u=i.done?d:h,r.arg===m)continue;return{value:r.arg,done:i.done}}"throw"===r.type&&(u=d,i.method="throw",i.arg=r.arg)}})}),e}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}i.wrap=u;var y="suspendedStart",h="suspendedYield",p="executing",d="completed",m={};function g(){}function v(){}function b(){}var e={},w=(a(e,n,function(){return this}),Object.getPrototypeOf),w=w&&w(w(T([]))),_=(w&&w!==t&&l.call(w,n)&&(e=w),b.prototype=g.prototype=Object.create(e));function L(t){["next","throw","return"].forEach(function(e){a(t,e,function(t){return this._invoke(e,t)})})}function S(i,u){var e;s(this,"_invoke",{value:function(r,n){function t(){return new u(function(t,e){!function e(t,r,n,o){var a,t=f(i[t],i,r);if("throw"!==t.type)return(r=(a=t.arg).value)&&"object"==_typeof(r)&&l.call(r,"__await")?u.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):u.resolve(r).then(function(t){a.value=t,n(a)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function T(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=c,t.done=!0,t}).next=t}throw new TypeError(_typeof(e)+" is not iterable")}return s(_,"constructor",{value:v.prototype=b,configurable:!0}),s(b,"constructor",{value:v,configurable:!0}),v.displayName=a(b,o,"GeneratorFunction"),i.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},i.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,a(t,o,"GeneratorFunction")),t.prototype=Object.create(_),t},i.awrap=function(t){return{__await:t}},L(S.prototype),a(S.prototype,r,function(){return this}),i.AsyncIterator=S,i.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var a=new S(u(t,e,r,n),o);return i.isGeneratorFunction(e)?a:a.next().then(function(t){return t.done?t.value:a.next()})},L(_),a(_,o,"Generator"),a(_,n,function(){return this}),a(_,"toString",function(){return"[object Generator]"}),i.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},i.values=T,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=c)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return a.type="throw",a.arg=r,n.next=t,e&&(n.method="next",n.arg=c),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],a=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var i=l.call(o,"catchLoc"),u=l.call(o,"finallyLoc");if(i&&u){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var a=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),x(r),m}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,x(o)),n}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=c),m}},i}function _slicedToArray(t,e){return _arrayWithHoles(t)||_iterableToArrayLimit(t,e)||_unsupportedIterableToArray(t,e)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a,i,u=[],c=!0,l=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=a.call(r)).done)&&(u.push(n.value),u.length!==e);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(l)throw o}}return u}}function _arrayWithHoles(t){if(Array.isArray(t))return t}function asyncGeneratorStep(t,e,r,n,o,a,i){try{var u=t[a](i),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}function _asyncToGenerator(u){return function(){var t=this,i=arguments;return new Promise(function(e,r){var n=u.apply(t,i);function o(t){asyncGeneratorStep(n,e,r,o,a,"next",t)}function a(t){asyncGeneratorStep(n,e,r,o,a,"throw",t)}o(void 0)})}}function _createForOfIteratorHelper(t,e){var r,n,o,a,i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(i)return n=!(r=!0),{s:function(){i=i.call(t)},n:function(){var t=i.next();return r=t.done,t},e:function(t){n=!0,o=t},f:function(){try{r||null==i.return||i.return()}finally{if(n)throw o}}};if(Array.isArray(t)||(i=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length)return i&&(t=i),a=0,{s:e=function(){},n:function(){return a>=t.length?{done:!0}:{done:!1,value:t[a++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var r;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(r="Object"===(r=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var body,formLogin,alertModal,inputs,rootCSS,api={log:"sdsdsdsdsd"},main=function(){prepareDOMElements(),prepareDOMEvents(),window.addEventListener("load",checkLoading)},prepareDOMElements=function(){body=document.querySelector("body"),rootCSS=document.documentElement,formLogin=body.querySelector(".login__form"),inputs=_toConsumableArray(formLogin.querySelectorAll("input")),alertModal=body.querySelector(".modal__alert"),console.log(rootCSS)},prepareDOMEvents=function(){onStartWebsite()},currentDate=function(){return new Date},onStartWebsite=function(){setThemeLogin()},setThemeLogin=function(){var r,t=currentDate().getMonth(),e=currentDate().getDate();[0<=t&&t<=2&&e<21,3<=t&&t<=5&&e<22,6<=t&&t<=8&&e<23,9<=t&&t<=11&&e<22].some(function(t,e){return!0===t?r=e:null});rootCSS.style.setProperty("--login-color",["210","122","300","14"][r]),body.querySelector(".login").style.backgroundImage="url('dist/img/bacground-login".concat(r,".png')")},checkLoading=function(){var t,e=_createForOfIteratorHelper(body.querySelectorAll("img"));try{for(e.s();!(t=e.n()).done;)if(!t.value.complete)return}catch(t){e.e(t)}finally{e.f()}body.querySelector(".loader").style.opacity=0},checkLogin=function(t){if(t.preventDefault(),!navigator.onLine)return showAlert("Brak połączenia z internetem!",!1);var e,r=inputs.map(function(t){return t.value});""===r[2]&&(e="",r[0].length||r[1].length?!r[0].length&&r[1].length?e="Wprowadź login!":r[0].length&&!r[1].length&&(e="Wprowadź hasło!"):e="Wprowadź dane!",""!==e?showAlert(e,!1):sendLogin(t.target,inputs))},sendLogin=function(){var r=_asyncToGenerator(_regeneratorRuntime().mark(function t(e,r){var n,o;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return o=_slicedToArray(r,2),n=o[0],o=o[1],e.disabled=!0,e.classList.add("loading"),t.prev=3,t.next=6,fetch(api.log,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({login:n,password:o})});case 6:if((n=t.sent).ok)return showAlert("Zalogowano",!0),t.next=11,n.json();t.next=15;break;case 11:o=t.sent,console.log(o),t.next=16;break;case 15:console.error("Złe API!");case 16:t.next=21;break;case 18:t.prev=18,t.t0=t.catch(3),showAlert(t.t0,!1);case 21:return t.prev=21,e.disabled=!1,e.classList.remove("loading"),t.finish(21);case 25:case"end":return t.stop()}},t,null,[[3,18,21,25]])}));return function(t,e){return r.apply(this,arguments)}}(),showAlert=function(t,e){alertModal.classList.add("scroll-down"),alertModal.textContent=t,alertModal.style.backgroundColor=e?"green":"red",setTimeout(function(){return alertModal.classList.remove("scroll-down")},1400)},showPassword=function(t){document.querySelector(".login__pass").textContent=t?"🙈":"👀",inputs[1].type=t?"text":"password"};document.addEventListener("DOMContentLoaded",main);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
